


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ********************
    2 00000000                 THUMB
    3 00000000                 REQUIRE8
    4 00000000                 PRESERVE8
    5 00000000         
    6 00000000         ;*******************************************************
                       *******************
    7 00000000         ;  Fichier Vierge.asm
    8 00000000         ; Auteur : V.MAHOUT
    9 00000000         ; Date :  12/11/2013
   10 00000000         ;*******************************************************
                       *******************
   11 00000000         
   12 00000000         ;***************IMPORT/EXPORT***************************
                       *******************
   13 00000000                 IMPORT           Barrette1
   14 00000000                 IMPORT           Barrette3
   15 00000000         
   16 00000000                 EXPORT           DriverGlobal
   17 00000000                 EXPORT           Tempo
   18 00000000                 EXPORT           DriverReg
   19 00000000                 IMPORT           DataSend
   20 00000000         
   21 00000000         ;*******************************************************
                       *******************
   22 00000000         
   23 00000000         
   24 00000000         
   25 00000000         ;***************CONSTANTES******************************
                       *******************
   26 00000000         
   27 00000000                 include          REG_UTILES.inc
    1 00000000         
    2 00000000         ;**************************************
    3 00000000         ;     Les adresess utiles  
    4 00000000         ;***************************************
    5 00000000         
    6 00000000         
    7 00000000         ;**************************************
    8 00000000         ;     Affectation des bits GPIO  
    9 00000000         ;***************************************
   10 00000000         ; GSLCK..... PA0 
   11 00000000         ; DSPRG..... PA1 
   12 00000000         ; BLANK..... PA2 
   13 00000000         ; XLAT...... PA3
   14 00000000         ; VPRG...... PA4
   15 00000000         ; SCLK...... PA5
   16 00000000         ; SIN1...... PA7
   17 00000000         ;Capteur.....PA8
   18 00000000         
   19 00000000         ;LED.........PB10
   20 00000000         ;****************************************/
   21 00000000         
   22 00000000         
   23 00000000         
   24 00000000 40010800 
                       GPIOBASEA
                               EQU              0X40010800



ARM Macro Assembler    Page 2 


   25 00000000 40010C00 
                       GPIOBASEB
                               EQU              0X40010C00
   26 00000000         
   27 00000000 00000008 
                       OffsetInput
                               EQU              0x08
   28 00000000 0000000C 
                       OffsetOutput
                               EQU              0x0C
   29 00000000 00000010 
                       OffsetSet
                               EQU              0x10
   30 00000000 00000014 
                       OffsetReset
                               EQU              0x14
   31 00000000         
   32 00000000         
   33 00000000 00000080 
                       MaskSerial_In1
                               equ              0x80
   34 00000000 00000080 
                       MaskSerial_Dots
                               equ              0x80
   35 00000000 00000010 
                       MaskVprg
                               equ              0x10
   36 00000000 00000008 
                       MaskXlat
                               equ              0x08
   37 00000000 00000004 
                       MaskBlank
                               equ              0x04
   38 00000000 00000020 
                       MaskSclk
                               equ              0x20
   39 00000000 00000002 
                       MaskDsprg
                               equ              0x02
   40 00000000 00000001 
                       MaskGsclk
                               equ              0x01
   41 00000000         
   42 00000000         
   43 00000000 E000ED08 
                       SCB_VTOR
                               EQU              0xE000ED08
   44 00000000 40012C10 
                       TIM1_SR EQU              0x40012c10
   45 00000000 40012C24 
                       TIM1_CNT
                               EQU              0x40012c24
   46 00000000 4000082C 
                       TIM4_ARR
                               EQU              0x4000082C
   47 00000000 40000810 
                       TIM4_SR EQU              0x40000810
   48 00000000         
   49 00000000         



ARM Macro Assembler    Page 3 


   50 00000000         
   51 00000000         
   52 00000000         
   53 00000000                 END
   28 00000000         
   29 00000000         ;*******************************************************
                       *******************
   30 00000000         
   31 00000000         
   32 00000000         ;***************VARIABLES*******************************
                       *******************
   33 00000000                 AREA             MesDonnees, data, readwrite
   34 00000000         ;*******************************************************
                       *******************
   35 00000000 01 00   ValCourante
                               DCW              1
   36 00000002         
   37 00000002         
   38 00000002         ;*******************************************************
                       *******************
   39 00000002         
   40 00000002         
   41 00000002         
   42 00000002         ;***************CODE************************************
                       *******************
   43 00000002                 AREA             moncode, code, readonly
   44 00000000         ;*******************************************************
                       *******************
   45 00000000         
   46 00000000         
   47 00000000         
   48 00000000         
   49 00000000         
   50 00000000         ;#######################################################
                       #################
   51 00000000         ; Procédure ????
   52 00000000         ;#######################################################
                       #################
   53 00000000         ;
   54 00000000         ; Paramètre entrant  : ???
   55 00000000         ; Paramètre sortant  : ???
   56 00000000         ; Variables globales : ???
   57 00000000         ; Registres modifiés : ???
   58 00000000         ;-------------------------------------------------------
                       -----------------
   59 00000000         
   60 00000000         DriverGlobal
                               PROC
   61 00000000 4948            LDR              R1, =GPIOBASEA
   62 00000002         ;set(slck)
   63 00000002 F04F 0220       MOV              R2, #(0x01 <<5)
   64 00000006 820A            STRH             R2, [R1,#OffsetSet]
   65 00000008         
   66 00000008 F04F 0300       MOV              R3, #0      ; curseur de la bou
                                                            cle 
   67 0000000C F04F 0430       MOV              R4, #48
   68 00000010 4845            LDR              R0, =ValCourante
   69 00000012 8805            LDRH             R5, [R0]
   70 00000014         



ARM Macro Assembler    Page 4 


   71 00000014         ;je mets lavaleur de Barrette1 dans R6
   72 00000014         ;LDR R0, =Barrette1
   73 00000014         ;LDRH R6, [R0]
   74 00000014         
   75 00000014 42A3    FOR_48  CMP              R3, R4
   76 00000016 D025            BEQ              END_FOR_48
   77 00000018         ;LDRB R5, [R6,R3] 
   78 00000018         ;je mets lavaleur de Barrette1 dans R6
   79 00000018 4844            LDR              R0, =Barrette3
   80 0000001A 8806            LDRH             R6, [R0]
   81 0000001C 5CC5            LDRB             R5, [R0,R3]
   82 0000001E         ;MOV R6, #(0x01 << 24)
   83 0000001E         ;LDR R5, [R4,R5]
   84 0000001E EA4F 6505       LSL              R5 , #24
   85 00000022         
   86 00000022 F04F 0700       MOV              R7, #0
   87 00000026 F04F 080C       MOV              R8, #12
   88 0000002A         
   89 0000002A 4547    FOR_12  CMP              R7,R8
   90 0000002C D017            BEQ              END_FOR_12
   91 0000002E         
   92 0000002E         ;reset(sclk) 
   93 0000002E F04F 0220       MOV              R2, #(0x01 << 5)
   94 00000032 828A            STRH             R2, [R1,#OffsetReset]
   95 00000034         
   96 00000034         ;test de la condition sur le poids fort    
   97 00000034 F015 4F00       TST              R5, #(0x01<<31)
   98 00000038 D004            BEQ              ELSE
   99 0000003A         
  100 0000003A         
  101 0000003A         IF
  102 0000003A         ;set(sin)
  103 0000003A F04F 0980       MOV              R9, #(0x01 << 7)
  104 0000003E F8A1 9010       STRH             R9, [R1, #OffsetSet]
  105 00000042 E004            B                EndIf
  106 00000044         
  107 00000044         ELSE                                 ;reset sin
  108 00000044 F04F 0980       MOV              R9, #(0x01 << 7)
  109 00000048 F8A1 9014       STRH             R9, [R1, #OffsetReset]
  110 0000004C E7FF            B                EndIf
  111 0000004E         
  112 0000004E EA4F 0545 
                       EndIf   LSL              R5, #1
  113 00000052         
  114 00000052         ;set(slck)
  115 00000052 F04F 0220       MOV              R2, #(0x01 << 5)
  116 00000056 820A            STRH             R2, [R1,#OffsetSet]
  117 00000058         
  118 00000058 F107 0701       ADD              R7, #1
  119 0000005C E7E5            B                FOR_12
  120 0000005E         END_FOR_12
  121 0000005E         
  122 0000005E F103 0301       ADD              R3, #1
  123 00000062 E7D7            B                FOR_48
  124 00000064         END_FOR_48
  125 00000064         
  126 00000064         ;reset(sclk) 
  127 00000064 F04F 0220       MOV              R2, #(0x01 << 5)
  128 00000068 828A            STRH             R2, [R1,#OffsetReset]



ARM Macro Assembler    Page 5 


  129 0000006A         
  130 0000006A         ;dataSend = 0 
  131 0000006A 4831            LDR              R0, =DataSend
  132 0000006C F8A0 A000       STRH             R10, [R0]
  133 00000070 F04F 0A00       MOV              R10, #0
  134 00000074 F8A0 A000       STRH             R10 , [R0]
  135 00000078         
  136 00000078 4770            BX               LR
  137 0000007A                 ENDP
  138 0000007A         
  139 0000007A         ;#######################################################
                       #################
  140 0000007A         ; Procédure ????
  141 0000007A         ;#######################################################
                       #################
  142 0000007A         ;
  143 0000007A         ; Paramètre entrant  : -
  144 0000007A         ; Paramètre sortant  : -
  145 0000007A         ; Variables globales : -
  146 0000007A         ; Registres modifiés : R0
  147 0000007A         ;-------------------------------------------------------
                       ----------------- 
  148 0000007A         
  149 0000007A         Tempo   PROC
  150 0000007A B401            PUSH{R0}
  151 0000007C F04F 0100       MOV              R1, #0
  152 00000080 F04F 050A       MOV              R5, #10
  153 00000084 FB00 F005       MUL              R0, R5
  154 00000088         
  155 00000088 4281    FOR_ONE CMP              R1,R0
  156 0000008A D00C            BEQ              END_ONE
  157 0000008C         
  158 0000008C F04F 0200       MOV              R2, #0
  159 00000090 F240 53DC       MOV              R3, #1500
  160 00000094         
  161 00000094 429A    FOR_TWO CMP              R2,R3
  162 00000096 D003            BEQ              END_TWO
  163 00000098 BF00            NOP
  164 0000009A F102 0201       ADD              R2, #1
  165 0000009E E7F9            B                FOR_TWO
  166 000000A0         END_TWO
  167 000000A0 F101 0101       ADD              R1, #1
  168 000000A4 E7F0            B                FOR_ONE
  169 000000A6         END_ONE
  170 000000A6 BC01            POP{R0}
  171 000000A8 4770            BX               LR
  172 000000AA                 ENDP
  173 000000AA         
  174 000000AA         ;#######################################################
                       #################
  175 000000AA         ; Procédure DriverReg
  176 000000AA         ;#######################################################
                       #################
  177 000000AA         ;
  178 000000AA         ; Paramètre entrant  : R11
  179 000000AA         ; Paramètre sortant  : ???
  180 000000AA         ; Variables globales : ???
  181 000000AA         ; Registres modifiés : ???
  182 000000AA         ;-------------------------------------------------------



ARM Macro Assembler    Page 6 


                       -----------------
  183 000000AA         
  184 000000AA         DriverReg
                               PROC
  185 000000AA 491E            LDR              R1, =GPIOBASEA
  186 000000AC         ;set(slck)
  187 000000AC F04F 0220       MOV              R2, #(0x01 <<5)
  188 000000B0 820A            STRH             R2, [R1,#OffsetSet]
  189 000000B2         
  190 000000B2 F04F 0300       MOV              R3, #0      ; curseur de la bou
                                                            cle 
  191 000000B6 F04F 0430       MOV              R4, #48
  192 000000BA 481B            LDR              R0, =ValCourante
  193 000000BC 8805            LDRH             R5, [R0]
  194 000000BE         
  195 000000BE         FOR_48_REG
  196 000000BE 42A3            CMP              R3, R4
  197 000000C0 D025            BEQ              END_FOR_48_REG
  198 000000C2         ;je mets la valeur de Barrette1 dans R6
  199 000000C2         
  200 000000C2 F8BB 6000       LDRH             R6, [R11]
  201 000000C6 5CC5            LDRB             R5, [R0,R3]
  202 000000C8 EA4F 6505       LSL              R5 , #24
  203 000000CC         
  204 000000CC F04F 0700       MOV              R7, #0
  205 000000D0 F04F 080C       MOV              R8, #12
  206 000000D4         
  207 000000D4         FOR_12_REG
  208 000000D4 4547            CMP              R7,R8
  209 000000D6 D017            BEQ              END_FOR_12_REG
  210 000000D8         
  211 000000D8         ;reset(sclk) 
  212 000000D8 F04F 0220       MOV              R2, #(0x01 << 5)
  213 000000DC 828A            STRH             R2, [R1,#OffsetReset]
  214 000000DE         
  215 000000DE         ;test de la condition sur le poids fort    
  216 000000DE F015 4F00       TST              R5, #(0x01<<31)
  217 000000E2 D004            BEQ              ELSE_REG
  218 000000E4         
  219 000000E4         
  220 000000E4         IF_REG
  221 000000E4         ;set(sin)
  222 000000E4 F04F 0980       MOV              R9, #(0x01 << 7)
  223 000000E8 F8A1 9010       STRH             R9, [R1, #OffsetSet]
  224 000000EC E004            B                EndIf_REG
  225 000000EE         
  226 000000EE         ELSE_REG                             ;reset sin
  227 000000EE F04F 0980       MOV              R9, #(0x01 << 7)
  228 000000F2 F8A1 9014       STRH             R9, [R1, #OffsetReset]
  229 000000F6 E7FF            B                EndIf_REG
  230 000000F8         
  231 000000F8         EndIf_REG
  232 000000F8 EA4F 0545       LSL              R5, #1
  233 000000FC         
  234 000000FC         ;set(slck)
  235 000000FC F04F 0220       MOV              R2, #(0x01 << 5)
  236 00000100 820A            STRH             R2, [R1,#OffsetSet]
  237 00000102         
  238 00000102 F107 0701       ADD              R7, #1



ARM Macro Assembler    Page 7 


  239 00000106 E7E5            B                FOR_12_REG
  240 00000108         END_FOR_12_REG
  241 00000108         
  242 00000108 F103 0301       ADD              R3, #1
  243 0000010C E7D7            B                FOR_48_REG
  244 0000010E         END_FOR_48_REG
  245 0000010E         
  246 0000010E         ;reset(sclk) 
  247 0000010E F04F 0220       MOV              R2, #(0x01 << 5)
  248 00000112 828A            STRH             R2, [R1,#OffsetReset]
  249 00000114         
  250 00000114         ;dataSend = 0 
  251 00000114 4806            LDR              R0, =DataSend
  252 00000116 F8A0 A000       STRH             R10, [R0]
  253 0000011A F04F 0A00       MOV              R10, #0
  254 0000011E F8A0 A000       STRH             R10 , [R0]
  255 00000122         
  256 00000122 4770            BX               LR
  257 00000124                 ENDP
  258 00000124         
  259 00000124         
  260 00000124         
  261 00000124         
  262 00000124         
  263 00000124         
  264 00000124         ;*******************************************************
                       *******************
  265 00000124                 END
              40010800 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\fonctionetape.d -o.\objects\fonctionetape.o -I.\RTE\Devi
ce\STM32F107VC -I.\RTE\_R_el -IC:\Programdata\Keil\Arm\Packs\ARM\CMSIS\5.7.0\CM
SIS\Core\Include -IC:\Programdata\Keil\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Devic
e\Include --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefi
ne="__UVISION_VERSION SETA 530" --predefine="_RTE_ SETA 1" --predefine="STM32F1
0X_CL SETA 1" --predefine="_RTE_ SETA 1" --predefine="STM32F10X_CL SETA 1" --li
st=.\listings\fonctionetape.lst FonctionEtape.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MesDonnees 00000000

Symbol: MesDonnees
   Definitions
      At line 33 in file FonctionEtape.asm
   Uses
      None
Comment: MesDonnees unused
ValCourante 00000000

Symbol: ValCourante
   Definitions
      At line 35 in file FonctionEtape.asm
   Uses
      At line 68 in file FonctionEtape.asm
      At line 192 in file FonctionEtape.asm

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DriverGlobal 00000000

Symbol: DriverGlobal
   Definitions
      At line 60 in file FonctionEtape.asm
   Uses
      At line 16 in file FonctionEtape.asm
Comment: DriverGlobal used once
DriverReg 000000AA

Symbol: DriverReg
   Definitions
      At line 184 in file FonctionEtape.asm
   Uses
      At line 18 in file FonctionEtape.asm
Comment: DriverReg used once
ELSE 00000044

Symbol: ELSE
   Definitions
      At line 107 in file FonctionEtape.asm
   Uses
      At line 98 in file FonctionEtape.asm
Comment: ELSE used once
ELSE_REG 000000EE

Symbol: ELSE_REG
   Definitions
      At line 226 in file FonctionEtape.asm
   Uses
      At line 217 in file FonctionEtape.asm
Comment: ELSE_REG used once
END_FOR_12 0000005E

Symbol: END_FOR_12
   Definitions
      At line 120 in file FonctionEtape.asm
   Uses
      At line 90 in file FonctionEtape.asm
Comment: END_FOR_12 used once
END_FOR_12_REG 00000108

Symbol: END_FOR_12_REG
   Definitions
      At line 240 in file FonctionEtape.asm
   Uses
      At line 209 in file FonctionEtape.asm
Comment: END_FOR_12_REG used once
END_FOR_48 00000064

Symbol: END_FOR_48
   Definitions
      At line 124 in file FonctionEtape.asm
   Uses
      At line 76 in file FonctionEtape.asm
Comment: END_FOR_48 used once
END_FOR_48_REG 0000010E

Symbol: END_FOR_48_REG



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 244 in file FonctionEtape.asm
   Uses
      At line 197 in file FonctionEtape.asm
Comment: END_FOR_48_REG used once
END_ONE 000000A6

Symbol: END_ONE
   Definitions
      At line 169 in file FonctionEtape.asm
   Uses
      At line 156 in file FonctionEtape.asm
Comment: END_ONE used once
END_TWO 000000A0

Symbol: END_TWO
   Definitions
      At line 166 in file FonctionEtape.asm
   Uses
      At line 162 in file FonctionEtape.asm
Comment: END_TWO used once
EndIf 0000004E

Symbol: EndIf
   Definitions
      At line 112 in file FonctionEtape.asm
   Uses
      At line 105 in file FonctionEtape.asm
      At line 110 in file FonctionEtape.asm

EndIf_REG 000000F8

Symbol: EndIf_REG
   Definitions
      At line 231 in file FonctionEtape.asm
   Uses
      At line 224 in file FonctionEtape.asm
      At line 229 in file FonctionEtape.asm

FOR_12 0000002A

Symbol: FOR_12
   Definitions
      At line 89 in file FonctionEtape.asm
   Uses
      At line 119 in file FonctionEtape.asm
Comment: FOR_12 used once
FOR_12_REG 000000D4

Symbol: FOR_12_REG
   Definitions
      At line 207 in file FonctionEtape.asm
   Uses
      At line 239 in file FonctionEtape.asm
Comment: FOR_12_REG used once
FOR_48 00000014

Symbol: FOR_48
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 75 in file FonctionEtape.asm
   Uses
      At line 123 in file FonctionEtape.asm
Comment: FOR_48 used once
FOR_48_REG 000000BE

Symbol: FOR_48_REG
   Definitions
      At line 195 in file FonctionEtape.asm
   Uses
      At line 243 in file FonctionEtape.asm
Comment: FOR_48_REG used once
FOR_ONE 00000088

Symbol: FOR_ONE
   Definitions
      At line 155 in file FonctionEtape.asm
   Uses
      At line 168 in file FonctionEtape.asm
Comment: FOR_ONE used once
FOR_TWO 00000094

Symbol: FOR_TWO
   Definitions
      At line 161 in file FonctionEtape.asm
   Uses
      At line 165 in file FonctionEtape.asm
Comment: FOR_TWO used once
IF 0000003A

Symbol: IF
   Definitions
      At line 101 in file FonctionEtape.asm
   Uses
      None
Comment: IF unused
IF_REG 000000E4

Symbol: IF_REG
   Definitions
      At line 220 in file FonctionEtape.asm
   Uses
      None
Comment: IF_REG unused
Tempo 0000007A

Symbol: Tempo
   Definitions
      At line 149 in file FonctionEtape.asm
   Uses
      At line 17 in file FonctionEtape.asm
Comment: Tempo used once
moncode 00000000

Symbol: moncode
   Definitions
      At line 43 in file FonctionEtape.asm
   Uses
      None



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: moncode unused
22 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIOBASEA 40010800

Symbol: GPIOBASEA
   Definitions
      At line 24 in file REG_UTILES.inc
   Uses
      At line 61 in file FonctionEtape.asm
      At line 185 in file FonctionEtape.asm

GPIOBASEB 40010C00

Symbol: GPIOBASEB
   Definitions
      At line 25 in file REG_UTILES.inc
   Uses
      None
Comment: GPIOBASEB unused
MaskBlank 00000004

Symbol: MaskBlank
   Definitions
      At line 37 in file REG_UTILES.inc
   Uses
      None
Comment: MaskBlank unused
MaskDsprg 00000002

Symbol: MaskDsprg
   Definitions
      At line 39 in file REG_UTILES.inc
   Uses
      None
Comment: MaskDsprg unused
MaskGsclk 00000001

Symbol: MaskGsclk
   Definitions
      At line 40 in file REG_UTILES.inc
   Uses
      None
Comment: MaskGsclk unused
MaskSclk 00000020

Symbol: MaskSclk
   Definitions
      At line 38 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSclk unused
MaskSerial_Dots 00000080

Symbol: MaskSerial_Dots
   Definitions
      At line 34 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSerial_Dots unused
MaskSerial_In1 00000080




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: MaskSerial_In1
   Definitions
      At line 33 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSerial_In1 unused
MaskVprg 00000010

Symbol: MaskVprg
   Definitions
      At line 35 in file REG_UTILES.inc
   Uses
      None
Comment: MaskVprg unused
MaskXlat 00000008

Symbol: MaskXlat
   Definitions
      At line 36 in file REG_UTILES.inc
   Uses
      None
Comment: MaskXlat unused
OffsetInput 00000008

Symbol: OffsetInput
   Definitions
      At line 27 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetInput unused
OffsetOutput 0000000C

Symbol: OffsetOutput
   Definitions
      At line 28 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetOutput unused
OffsetReset 00000014

Symbol: OffsetReset
   Definitions
      At line 30 in file REG_UTILES.inc
   Uses
      At line 94 in file FonctionEtape.asm
      At line 109 in file FonctionEtape.asm
      At line 128 in file FonctionEtape.asm
      At line 213 in file FonctionEtape.asm
      At line 228 in file FonctionEtape.asm
      At line 248 in file FonctionEtape.asm

OffsetSet 00000010

Symbol: OffsetSet
   Definitions
      At line 29 in file REG_UTILES.inc
   Uses
      At line 64 in file FonctionEtape.asm
      At line 104 in file FonctionEtape.asm



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 116 in file FonctionEtape.asm
      At line 188 in file FonctionEtape.asm
      At line 223 in file FonctionEtape.asm
      At line 236 in file FonctionEtape.asm

SCB_VTOR E000ED08

Symbol: SCB_VTOR
   Definitions
      At line 43 in file REG_UTILES.inc
   Uses
      None
Comment: SCB_VTOR unused
TIM1_CNT 40012C24

Symbol: TIM1_CNT
   Definitions
      At line 45 in file REG_UTILES.inc
   Uses
      None
Comment: TIM1_CNT unused
TIM1_SR 40012C10

Symbol: TIM1_SR
   Definitions
      At line 44 in file REG_UTILES.inc
   Uses
      None
Comment: TIM1_SR unused
TIM4_ARR 4000082C

Symbol: TIM4_ARR
   Definitions
      At line 46 in file REG_UTILES.inc
   Uses
      None
Comment: TIM4_ARR unused
TIM4_SR 40000810

Symbol: TIM4_SR
   Definitions
      At line 47 in file REG_UTILES.inc
   Uses
      None
Comment: TIM4_SR unused
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Barrette1 00000000

Symbol: Barrette1
   Definitions
      At line 13 in file FonctionEtape.asm
   Uses
      None
Comment: Barrette1 unused
Barrette3 00000000

Symbol: Barrette3
   Definitions
      At line 14 in file FonctionEtape.asm
   Uses
      At line 79 in file FonctionEtape.asm
Comment: Barrette3 used once
DataSend 00000000

Symbol: DataSend
   Definitions
      At line 19 in file FonctionEtape.asm
   Uses
      At line 131 in file FonctionEtape.asm
      At line 251 in file FonctionEtape.asm

3 symbols
383 symbols in table
