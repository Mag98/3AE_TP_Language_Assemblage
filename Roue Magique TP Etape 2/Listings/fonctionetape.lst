


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ********************
    2 00000000                 THUMB
    3 00000000                 REQUIRE8
    4 00000000                 PRESERVE8
    5 00000000         
    6 00000000         ;*******************************************************
                       *******************
    7 00000000         ;  Fichier Vierge.asm
    8 00000000         ; Auteur : V.MAHOUT
    9 00000000         ; Date :  12/11/2013
   10 00000000         ;*******************************************************
                       *******************
   11 00000000         
   12 00000000         ;***************IMPORT/EXPORT***************************
                       *******************
   13 00000000                 IMPORT           Barrette1
   14 00000000                 IMPORT           Barrette3
   15 00000000         
   16 00000000                 EXPORT           DriverGlobal
   17 00000000                 EXPORT           Tempo
   18 00000000                 EXPORT           DriverReg
   19 00000000                 IMPORT           DataSend
   20 00000000                 EXPORT           DriverPile
   21 00000000         
   22 00000000         ;*******************************************************
                       *******************
   23 00000000         
   24 00000000         
   25 00000000         
   26 00000000         ;***************CONSTANTES******************************
                       *******************
   27 00000000         
   28 00000000                 include          REG_UTILES.inc
    1 00000000         
    2 00000000         ;**************************************
    3 00000000         ;     Les adresess utiles  
    4 00000000         ;***************************************
    5 00000000         
    6 00000000         
    7 00000000         ;**************************************
    8 00000000         ;     Affectation des bits GPIO  
    9 00000000         ;***************************************
   10 00000000         ; GSLCK..... PA0 
   11 00000000         ; DSPRG..... PA1 
   12 00000000         ; BLANK..... PA2 
   13 00000000         ; XLAT...... PA3
   14 00000000         ; VPRG...... PA4
   15 00000000         ; SCLK...... PA5
   16 00000000         ; SIN1...... PA7
   17 00000000         ;Capteur.....PA8
   18 00000000         
   19 00000000         ;LED.........PB10
   20 00000000         ;****************************************/
   21 00000000         
   22 00000000         
   23 00000000         
   24 00000000 40010800 
                       GPIOBASEA



ARM Macro Assembler    Page 2 


                               EQU              0X40010800
   25 00000000 40010C00 
                       GPIOBASEB
                               EQU              0X40010C00
   26 00000000         
   27 00000000 00000008 
                       OffsetInput
                               EQU              0x08
   28 00000000 0000000C 
                       OffsetOutput
                               EQU              0x0C
   29 00000000 00000010 
                       OffsetSet
                               EQU              0x10
   30 00000000 00000014 
                       OffsetReset
                               EQU              0x14
   31 00000000         
   32 00000000         
   33 00000000 00000080 
                       MaskSerial_In1
                               equ              0x80
   34 00000000 00000080 
                       MaskSerial_Dots
                               equ              0x80
   35 00000000 00000010 
                       MaskVprg
                               equ              0x10
   36 00000000 00000008 
                       MaskXlat
                               equ              0x08
   37 00000000 00000004 
                       MaskBlank
                               equ              0x04
   38 00000000 00000020 
                       MaskSclk
                               equ              0x20
   39 00000000 00000002 
                       MaskDsprg
                               equ              0x02
   40 00000000 00000001 
                       MaskGsclk
                               equ              0x01
   41 00000000         
   42 00000000         
   43 00000000 E000ED08 
                       SCB_VTOR
                               EQU              0xE000ED08
   44 00000000 40012C10 
                       TIM1_SR EQU              0x40012c10
   45 00000000 40012C24 
                       TIM1_CNT
                               EQU              0x40012c24
   46 00000000 4000082C 
                       TIM4_ARR
                               EQU              0x4000082C
   47 00000000 40000810 
                       TIM4_SR EQU              0x40000810
   48 00000000         



ARM Macro Assembler    Page 3 


   49 00000000         
   50 00000000         
   51 00000000         
   52 00000000         
   53 00000000                 END
   29 00000000         
   30 00000000         ;*******************************************************
                       *******************
   31 00000000         
   32 00000000         
   33 00000000         ;***************VARIABLES*******************************
                       *******************
   34 00000000                 AREA             MesDonnees, data, readwrite
   35 00000000         ;*******************************************************
                       *******************
   36 00000000 01 00   ValCourante
                               DCW              1
   37 00000002         
   38 00000002         
   39 00000002         ;*******************************************************
                       *******************
   40 00000002         
   41 00000002         
   42 00000002         
   43 00000002         ;***************CODE************************************
                       *******************
   44 00000002                 AREA             moncode, code, readonly
   45 00000000         ;*******************************************************
                       *******************
   46 00000000         
   47 00000000         
   48 00000000         
   49 00000000         
   50 00000000         
   51 00000000         ;#######################################################
                       #################
   52 00000000         ; Procédure DriverGlobal
   53 00000000         ;#######################################################
                       #################
   54 00000000         ;
   55 00000000         ; Paramètre entrant  : ???
   56 00000000         ; Paramètre sortant  : ???
   57 00000000         ; Variables globales : ???
   58 00000000         ; Registres modifiés : ???
   59 00000000         ;-------------------------------------------------------
                       -----------------
   60 00000000         
   61 00000000         DriverGlobal
                               PROC
   62 00000000 E92D 07FF       PUSH{R1,R2,R3,R4,R0,R5,R6,R7,R8,R9,R10}
   63 00000004 496D            LDR              R1, =GPIOBASEA
   64 00000006         ;set(slck)
   65 00000006 F04F 0220       MOV              R2, #(0x01 <<5)
   66 0000000A 820A            STRH             R2, [R1,#OffsetSet]
   67 0000000C         
   68 0000000C F04F 0300       MOV              R3, #0      ; curseur de la bou
                                                            cle 
   69 00000010 F04F 0430       MOV              R4, #48
   70 00000014 486A            LDR              R0, =ValCourante



ARM Macro Assembler    Page 4 


   71 00000016 8805            LDRH             R5, [R0]
   72 00000018         
   73 00000018         
   74 00000018         
   75 00000018 42A3    FOR_48  CMP              R3, R4
   76 0000001A D025            BEQ              END_FOR_48
   77 0000001C         ;LDRB R5, [R6,R3] 
   78 0000001C         ;je mets la valeur de Barrette1 dans R6
   79 0000001C 4869            LDR              R0, =Barrette3
   80 0000001E 8806            LDRH             R6, [R0]
   81 00000020 5CC5            LDRB             R5, [R0,R3]
   82 00000022         ;MOV R6, #(0x01 << 24)
   83 00000022         ;LDR R5, [R4,R5]
   84 00000022 EA4F 6505       LSL              R5 , #24
   85 00000026         
   86 00000026 F04F 0700       MOV              R7, #0
   87 0000002A F04F 080C       MOV              R8, #12
   88 0000002E         
   89 0000002E 4547    FOR_12  CMP              R7,R8
   90 00000030 D017            BEQ              END_FOR_12
   91 00000032         
   92 00000032         ;reset(sclk) 
   93 00000032 F04F 0220       MOV              R2, #(0x01 << 5)
   94 00000036 828A            STRH             R2, [R1,#OffsetReset]
   95 00000038         
   96 00000038         ;test de la condition sur le poids fort    
   97 00000038 F015 4F00       TST              R5, #(0x01<<31)
   98 0000003C D004            BEQ              ELSE
   99 0000003E         
  100 0000003E         
  101 0000003E         IF
  102 0000003E         ;set(sin)
  103 0000003E F04F 0980       MOV              R9, #(0x01 << 7)
  104 00000042 F8A1 9010       STRH             R9, [R1, #OffsetSet]
  105 00000046 E004            B                EndIf
  106 00000048         
  107 00000048         ELSE                                 ;reset sin
  108 00000048 F04F 0980       MOV              R9, #(0x01 << 7)
  109 0000004C F8A1 9014       STRH             R9, [R1, #OffsetReset]
  110 00000050 E7FF            B                EndIf
  111 00000052         
  112 00000052 EA4F 0545 
                       EndIf   LSL              R5, #1
  113 00000056         
  114 00000056         ;set(slck)
  115 00000056 F04F 0220       MOV              R2, #(0x01 << 5)
  116 0000005A 820A            STRH             R2, [R1,#OffsetSet]
  117 0000005C         
  118 0000005C F107 0701       ADD              R7, #1
  119 00000060 E7E5            B                FOR_12
  120 00000062         END_FOR_12
  121 00000062         
  122 00000062 F103 0301       ADD              R3, #1
  123 00000066 E7D7            B                FOR_48
  124 00000068         END_FOR_48
  125 00000068         
  126 00000068         ;reset(sclk) 
  127 00000068 F04F 0220       MOV              R2, #(0x01 << 5)
  128 0000006C 828A            STRH             R2, [R1,#OffsetReset]



ARM Macro Assembler    Page 5 


  129 0000006E         
  130 0000006E         ;dataSend = 0 
  131 0000006E 4856            LDR              R0, =DataSend
  132 00000070 F8A0 A000       STRH             R10, [R0]
  133 00000074 F04F 0A00       MOV              R10, #0
  134 00000078 F8A0 A000       STRH             R10 , [R0]
  135 0000007C         
  136 0000007C E8BD 07FF       POP{R1,R2,R3,R4,R0,R5,R6,R7,R8,R9,R10}
  137 00000080 4770            BX               LR
  138 00000082                 ENDP
  139 00000082         
  140 00000082         ;#######################################################
                       #################
  141 00000082         ; Procédure Tempo
  142 00000082         ;#######################################################
                       #################
  143 00000082         ;
  144 00000082         ; Paramètre entrant  : -
  145 00000082         ; Paramètre sortant  : -
  146 00000082         ; Variables globales : -
  147 00000082         ; Registres modifiés : R0
  148 00000082         ;-------------------------------------------------------
                       ----------------- 
  149 00000082         
  150 00000082         Tempo   PROC
  151 00000082 B42D            PUSH{R0,R2,R3,R5}
  152 00000084 F04F 0100       MOV              R1, #0
  153 00000088 F04F 050A       MOV              R5, #10
  154 0000008C FB00 F005       MUL              R0, R5
  155 00000090         
  156 00000090 4281    FOR_ONE CMP              R1,R0
  157 00000092 D00C            BEQ              END_ONE
  158 00000094         
  159 00000094 F04F 0200       MOV              R2, #0
  160 00000098 F240 53DC       MOV              R3, #1500
  161 0000009C         
  162 0000009C 429A    FOR_TWO CMP              R2,R3
  163 0000009E D003            BEQ              END_TWO
  164 000000A0 BF00            NOP
  165 000000A2 F102 0201       ADD              R2, #1
  166 000000A6 E7F9            B                FOR_TWO
  167 000000A8         END_TWO
  168 000000A8 F101 0101       ADD              R1, #1
  169 000000AC E7F0            B                FOR_ONE
  170 000000AE         END_ONE
  171 000000AE BC2D            POP{R0,R2,R3,R5}
  172 000000B0 4770            BX               LR
  173 000000B2                 ENDP
  174 000000B2         
  175 000000B2         
  176 000000B2         ;#######################################################
                       #################
  177 000000B2         ; Procédure DriverReg
  178 000000B2         ;#######################################################
                       #################
  179 000000B2         ;
  180 000000B2         ; Paramètre entrant  : R11
  181 000000B2         ; Paramètre sortant  : ???
  182 000000B2         ; Variables globales : ???



ARM Macro Assembler    Page 6 


  183 000000B2         ; Registres modifiés : ???
  184 000000B2         ;-------------------------------------------------------
                       -----------------
  185 000000B2         
  186 000000B2         DriverReg
                               PROC
  187 000000B2 E92D 07FF       PUSH{R1,R2,R3,R4,R0,R5,R6,R7,R8,R9,R10}
  188 000000B6 4941            LDR              R1, =GPIOBASEA
  189 000000B8         ;set(slck)
  190 000000B8 F04F 0220       MOV              R2, #(0x01 <<5)
  191 000000BC 820A            STRH             R2, [R1,#OffsetSet]
  192 000000BE         
  193 000000BE F04F 0300       MOV              R3, #0      ; curseur de la bou
                                                            cle 
  194 000000C2 F04F 0430       MOV              R4, #48
  195 000000C6 483E            LDR              R0, =ValCourante
  196 000000C8 8805            LDRH             R5, [R0]
  197 000000CA         
  198 000000CA         FOR_48_REG
  199 000000CA 42A3            CMP              R3, R4
  200 000000CC D026            BEQ              END_FOR_48_REG
  201 000000CE         
  202 000000CE         ;je mets la valeur de Barrette1 dans R6
  203 000000CE F8BB 6000       LDRH             R6, [R11]
  204 000000D2 F81B 5003       LDRB             R5, [R11,R3]
  205 000000D6 EA4F 6505       LSL              R5 , #24
  206 000000DA         
  207 000000DA F04F 0700       MOV              R7, #0
  208 000000DE F04F 080C       MOV              R8, #12
  209 000000E2         
  210 000000E2         FOR_12_REG
  211 000000E2 4547            CMP              R7,R8
  212 000000E4 D017            BEQ              END_FOR_12_REG
  213 000000E6         
  214 000000E6         ;reset(sclk) 
  215 000000E6 F04F 0220       MOV              R2, #(0x01 << 5)
  216 000000EA 828A            STRH             R2, [R1,#OffsetReset]
  217 000000EC         
  218 000000EC         ;test de la condition sur le poids fort    
  219 000000EC F015 4F00       TST              R5, #(0x01<<31)
  220 000000F0 D004            BEQ              ELSE_REG
  221 000000F2         
  222 000000F2         
  223 000000F2         IF_REG
  224 000000F2         ;set(sin)
  225 000000F2 F04F 0980       MOV              R9, #(0x01 << 7)
  226 000000F6 F8A1 9010       STRH             R9, [R1, #OffsetSet]
  227 000000FA E004            B                EndIf_REG
  228 000000FC         
  229 000000FC         ELSE_REG                             ;reset sin
  230 000000FC F04F 0980       MOV              R9, #(0x01 << 7)
  231 00000100 F8A1 9014       STRH             R9, [R1, #OffsetReset]
  232 00000104 E7FF            B                EndIf_REG
  233 00000106         
  234 00000106         EndIf_REG
  235 00000106 EA4F 0545       LSL              R5, #1
  236 0000010A         
  237 0000010A         ;set(slck)
  238 0000010A F04F 0220       MOV              R2, #(0x01 << 5)



ARM Macro Assembler    Page 7 


  239 0000010E 820A            STRH             R2, [R1,#OffsetSet]
  240 00000110         
  241 00000110 F107 0701       ADD              R7, #1
  242 00000114 E7E5            B                FOR_12_REG
  243 00000116         END_FOR_12_REG
  244 00000116         
  245 00000116 F103 0301       ADD              R3, #1
  246 0000011A E7D6            B                FOR_48_REG
  247 0000011C         END_FOR_48_REG
  248 0000011C         
  249 0000011C         ;reset(sclk) 
  250 0000011C F04F 0220       MOV              R2, #(0x01 << 5)
  251 00000120 828A            STRH             R2, [R1,#OffsetReset]
  252 00000122         
  253 00000122         ;dataSend = 0 
  254 00000122 4829            LDR              R0, =DataSend
  255 00000124 F8A0 A000       STRH             R10, [R0]
  256 00000128 F04F 0A00       MOV              R10, #0
  257 0000012C F8A0 A000       STRH             R10 , [R0]
  258 00000130         
  259 00000130 E8BD 07FF       POP{R1,R2,R3,R4,R0,R5,R6,R7,R8,R9,R10}
  260 00000134         
  261 00000134 4770            BX               LR
  262 00000136                 ENDP
  263 00000136         
  264 00000136         
  265 00000136         
  266 00000136         ;#######################################################
                       #################
  267 00000136         ; Procédure DriverPile
  268 00000136         ;#######################################################
                       #################
  269 00000136         ;
  270 00000136         ; Paramètre entrant  : R11
  271 00000136         ; Paramètre sortant  : ???
  272 00000136         ; Variables globales : ???
  273 00000136         ; Registres modifiés : ???
  274 00000136         ;-------------------------------------------------------
                       -----------------
  275 00000136         
  276 00000136         DriverPile
                               PROC
  277 00000136 E92D 07FF       PUSH{R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10}
  278 0000013A 4920            LDR              R1, =GPIOBASEA
  279 0000013C F04F 0220       MOV              R2, #(0x01 <<5)
  280 00000140 820A            STRH             R2, [R1,#OffsetSet]
  281 00000142         
  282 00000142 F04F 0300       MOV              R3, #0      ; curseur de la bou
                                                            cle 
  283 00000146 F04F 0430       MOV              R4, #48
  284 0000014A 481D            LDR              R0, =ValCourante
  285 0000014C 8805            LDRH             R5, [R0]
  286 0000014E         
  287 0000014E         FOR_48_PILE
  288 0000014E 42A3            CMP              R3, R4
  289 00000150 D026            BEQ              END_FOR_48_PILE
  290 00000152         
  291 00000152         ;je mets la valeur de Barrette1 dans R6
  292 00000152 F8BB 6000       LDRH             R6, [R11]



ARM Macro Assembler    Page 8 


  293 00000156 F81B 5003       LDRB             R5, [R11,R3]
  294 0000015A EA4F 6505       LSL              R5 , #24
  295 0000015E         
  296 0000015E F04F 0700       MOV              R7, #0
  297 00000162 F04F 080C       MOV              R8, #12
  298 00000166         
  299 00000166         FOR_12_PILE
  300 00000166 4547            CMP              R7,R8
  301 00000168 D017            BEQ              END_FOR_12_PILE
  302 0000016A         
  303 0000016A         ;reset(sclk) 
  304 0000016A F04F 0220       MOV              R2, #(0x01 << 5)
  305 0000016E 828A            STRH             R2, [R1,#OffsetReset]
  306 00000170         
  307 00000170         ;test de la condition sur le poids fort    
  308 00000170 F015 4F00       TST              R5, #(0x01<<31)
  309 00000174 D004            BEQ              ELSE_PILE
  310 00000176         
  311 00000176         
  312 00000176         IF_PILE
  313 00000176         ;set(sin)
  314 00000176 F04F 0980       MOV              R9, #(0x01 << 7)
  315 0000017A F8A1 9010       STRH             R9, [R1, #OffsetSet]
  316 0000017E E004            B                EndIf_PILE
  317 00000180         
  318 00000180         ELSE_PILE                            ;reset sin
  319 00000180 F04F 0980       MOV              R9, #(0x01 << 7)
  320 00000184 F8A1 9014       STRH             R9, [R1, #OffsetReset]
  321 00000188 E7FF            B                EndIf_PILE
  322 0000018A         
  323 0000018A         EndIf_PILE
  324 0000018A EA4F 0545       LSL              R5, #1
  325 0000018E         
  326 0000018E         ;set(slck)
  327 0000018E F04F 0220       MOV              R2, #(0x01 << 5)
  328 00000192 820A            STRH             R2, [R1,#OffsetSet]
  329 00000194         
  330 00000194 F107 0701       ADD              R7, #1
  331 00000198 E7E5            B                FOR_12_PILE
  332 0000019A         END_FOR_12_PILE
  333 0000019A         
  334 0000019A F103 0301       ADD              R3, #1
  335 0000019E E7D6            B                FOR_48_PILE
  336 000001A0         END_FOR_48_PILE
  337 000001A0         
  338 000001A0         ;reset(sclk) 
  339 000001A0 F04F 0220       MOV              R2, #(0x01 << 5)
  340 000001A4 828A            STRH             R2, [R1,#OffsetReset]
  341 000001A6         
  342 000001A6         ;dataSend = 0 
  343 000001A6 4808            LDR              R0, =DataSend
  344 000001A8 F8A0 A000       STRH             R10, [R0]
  345 000001AC F04F 0A00       MOV              R10, #0
  346 000001B0 F8A0 A000       STRH             R10 , [R0]
  347 000001B4         
  348 000001B4 E8BD 07FE       POP{R1,R2,R3,R4,R5,R6,R7,R8,R9,R10}
  349 000001B8         
  350 000001B8 4770            BX               LR
  351 000001BA                 ENDP



ARM Macro Assembler    Page 9 


  352 000001BA         
  353 000001BA         
  354 000001BA         
  355 000001BA         ;*******************************************************
                       *******************
  356 000001BA                 END
              00 00 40010800 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\fonctionetape.d -o.\objects\fonctionetape.o -I.\RTE\Devi
ce\STM32F107VC -I.\RTE\_R_el -IC:\Programdata\Keil\Arm\Packs\ARM\CMSIS\5.7.0\CM
SIS\Core\Include -IC:\Programdata\Keil\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Devic
e\Include --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefi
ne="__UVISION_VERSION SETA 530" --predefine="_RTE_ SETA 1" --predefine="STM32F1
0X_CL SETA 1" --predefine="_RTE_ SETA 1" --predefine="STM32F10X_CL SETA 1" --li
st=.\listings\fonctionetape.lst FonctionEtape.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MesDonnees 00000000

Symbol: MesDonnees
   Definitions
      At line 34 in file FonctionEtape.asm
   Uses
      None
Comment: MesDonnees unused
ValCourante 00000000

Symbol: ValCourante
   Definitions
      At line 36 in file FonctionEtape.asm
   Uses
      At line 70 in file FonctionEtape.asm
      At line 195 in file FonctionEtape.asm
      At line 284 in file FonctionEtape.asm

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DriverGlobal 00000000

Symbol: DriverGlobal
   Definitions
      At line 61 in file FonctionEtape.asm
   Uses
      At line 16 in file FonctionEtape.asm
Comment: DriverGlobal used once
DriverPile 00000136

Symbol: DriverPile
   Definitions
      At line 276 in file FonctionEtape.asm
   Uses
      At line 20 in file FonctionEtape.asm
Comment: DriverPile used once
DriverReg 000000B2

Symbol: DriverReg
   Definitions
      At line 186 in file FonctionEtape.asm
   Uses
      At line 18 in file FonctionEtape.asm
Comment: DriverReg used once
ELSE 00000048

Symbol: ELSE
   Definitions
      At line 107 in file FonctionEtape.asm
   Uses
      At line 98 in file FonctionEtape.asm
Comment: ELSE used once
ELSE_PILE 00000180

Symbol: ELSE_PILE
   Definitions
      At line 318 in file FonctionEtape.asm
   Uses
      At line 309 in file FonctionEtape.asm
Comment: ELSE_PILE used once
ELSE_REG 000000FC

Symbol: ELSE_REG
   Definitions
      At line 229 in file FonctionEtape.asm
   Uses
      At line 220 in file FonctionEtape.asm
Comment: ELSE_REG used once
END_FOR_12 00000062

Symbol: END_FOR_12
   Definitions
      At line 120 in file FonctionEtape.asm
   Uses
      At line 90 in file FonctionEtape.asm
Comment: END_FOR_12 used once
END_FOR_12_PILE 0000019A

Symbol: END_FOR_12_PILE



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 332 in file FonctionEtape.asm
   Uses
      At line 301 in file FonctionEtape.asm
Comment: END_FOR_12_PILE used once
END_FOR_12_REG 00000116

Symbol: END_FOR_12_REG
   Definitions
      At line 243 in file FonctionEtape.asm
   Uses
      At line 212 in file FonctionEtape.asm
Comment: END_FOR_12_REG used once
END_FOR_48 00000068

Symbol: END_FOR_48
   Definitions
      At line 124 in file FonctionEtape.asm
   Uses
      At line 76 in file FonctionEtape.asm
Comment: END_FOR_48 used once
END_FOR_48_PILE 000001A0

Symbol: END_FOR_48_PILE
   Definitions
      At line 336 in file FonctionEtape.asm
   Uses
      At line 289 in file FonctionEtape.asm
Comment: END_FOR_48_PILE used once
END_FOR_48_REG 0000011C

Symbol: END_FOR_48_REG
   Definitions
      At line 247 in file FonctionEtape.asm
   Uses
      At line 200 in file FonctionEtape.asm
Comment: END_FOR_48_REG used once
END_ONE 000000AE

Symbol: END_ONE
   Definitions
      At line 170 in file FonctionEtape.asm
   Uses
      At line 157 in file FonctionEtape.asm
Comment: END_ONE used once
END_TWO 000000A8

Symbol: END_TWO
   Definitions
      At line 167 in file FonctionEtape.asm
   Uses
      At line 163 in file FonctionEtape.asm
Comment: END_TWO used once
EndIf 00000052

Symbol: EndIf
   Definitions
      At line 112 in file FonctionEtape.asm
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 105 in file FonctionEtape.asm
      At line 110 in file FonctionEtape.asm

EndIf_PILE 0000018A

Symbol: EndIf_PILE
   Definitions
      At line 323 in file FonctionEtape.asm
   Uses
      At line 316 in file FonctionEtape.asm
      At line 321 in file FonctionEtape.asm

EndIf_REG 00000106

Symbol: EndIf_REG
   Definitions
      At line 234 in file FonctionEtape.asm
   Uses
      At line 227 in file FonctionEtape.asm
      At line 232 in file FonctionEtape.asm

FOR_12 0000002E

Symbol: FOR_12
   Definitions
      At line 89 in file FonctionEtape.asm
   Uses
      At line 119 in file FonctionEtape.asm
Comment: FOR_12 used once
FOR_12_PILE 00000166

Symbol: FOR_12_PILE
   Definitions
      At line 299 in file FonctionEtape.asm
   Uses
      At line 331 in file FonctionEtape.asm
Comment: FOR_12_PILE used once
FOR_12_REG 000000E2

Symbol: FOR_12_REG
   Definitions
      At line 210 in file FonctionEtape.asm
   Uses
      At line 242 in file FonctionEtape.asm
Comment: FOR_12_REG used once
FOR_48 00000018

Symbol: FOR_48
   Definitions
      At line 75 in file FonctionEtape.asm
   Uses
      At line 123 in file FonctionEtape.asm
Comment: FOR_48 used once
FOR_48_PILE 0000014E

Symbol: FOR_48_PILE
   Definitions
      At line 287 in file FonctionEtape.asm
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 335 in file FonctionEtape.asm
Comment: FOR_48_PILE used once
FOR_48_REG 000000CA

Symbol: FOR_48_REG
   Definitions
      At line 198 in file FonctionEtape.asm
   Uses
      At line 246 in file FonctionEtape.asm
Comment: FOR_48_REG used once
FOR_ONE 00000090

Symbol: FOR_ONE
   Definitions
      At line 156 in file FonctionEtape.asm
   Uses
      At line 169 in file FonctionEtape.asm
Comment: FOR_ONE used once
FOR_TWO 0000009C

Symbol: FOR_TWO
   Definitions
      At line 162 in file FonctionEtape.asm
   Uses
      At line 166 in file FonctionEtape.asm
Comment: FOR_TWO used once
IF 0000003E

Symbol: IF
   Definitions
      At line 101 in file FonctionEtape.asm
   Uses
      None
Comment: IF unused
IF_PILE 00000176

Symbol: IF_PILE
   Definitions
      At line 312 in file FonctionEtape.asm
   Uses
      None
Comment: IF_PILE unused
IF_REG 000000F2

Symbol: IF_REG
   Definitions
      At line 223 in file FonctionEtape.asm
   Uses
      None
Comment: IF_REG unused
Tempo 00000082

Symbol: Tempo
   Definitions
      At line 150 in file FonctionEtape.asm
   Uses
      At line 17 in file FonctionEtape.asm
Comment: Tempo used once
moncode 00000000



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


Symbol: moncode
   Definitions
      At line 44 in file FonctionEtape.asm
   Uses
      None
Comment: moncode unused
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIOBASEA 40010800

Symbol: GPIOBASEA
   Definitions
      At line 24 in file REG_UTILES.inc
   Uses
      At line 63 in file FonctionEtape.asm
      At line 188 in file FonctionEtape.asm
      At line 278 in file FonctionEtape.asm

GPIOBASEB 40010C00

Symbol: GPIOBASEB
   Definitions
      At line 25 in file REG_UTILES.inc
   Uses
      None
Comment: GPIOBASEB unused
MaskBlank 00000004

Symbol: MaskBlank
   Definitions
      At line 37 in file REG_UTILES.inc
   Uses
      None
Comment: MaskBlank unused
MaskDsprg 00000002

Symbol: MaskDsprg
   Definitions
      At line 39 in file REG_UTILES.inc
   Uses
      None
Comment: MaskDsprg unused
MaskGsclk 00000001

Symbol: MaskGsclk
   Definitions
      At line 40 in file REG_UTILES.inc
   Uses
      None
Comment: MaskGsclk unused
MaskSclk 00000020

Symbol: MaskSclk
   Definitions
      At line 38 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSclk unused
MaskSerial_Dots 00000080

Symbol: MaskSerial_Dots
   Definitions
      At line 34 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSerial_Dots unused
MaskSerial_In1 00000080



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: MaskSerial_In1
   Definitions
      At line 33 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSerial_In1 unused
MaskVprg 00000010

Symbol: MaskVprg
   Definitions
      At line 35 in file REG_UTILES.inc
   Uses
      None
Comment: MaskVprg unused
MaskXlat 00000008

Symbol: MaskXlat
   Definitions
      At line 36 in file REG_UTILES.inc
   Uses
      None
Comment: MaskXlat unused
OffsetInput 00000008

Symbol: OffsetInput
   Definitions
      At line 27 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetInput unused
OffsetOutput 0000000C

Symbol: OffsetOutput
   Definitions
      At line 28 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetOutput unused
OffsetReset 00000014

Symbol: OffsetReset
   Definitions
      At line 30 in file REG_UTILES.inc
   Uses
      At line 94 in file FonctionEtape.asm
      At line 109 in file FonctionEtape.asm
      At line 128 in file FonctionEtape.asm
      At line 216 in file FonctionEtape.asm
      At line 231 in file FonctionEtape.asm
      At line 251 in file FonctionEtape.asm
      At line 305 in file FonctionEtape.asm
      At line 320 in file FonctionEtape.asm
      At line 340 in file FonctionEtape.asm

OffsetSet 00000010

Symbol: OffsetSet
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 29 in file REG_UTILES.inc
   Uses
      At line 66 in file FonctionEtape.asm
      At line 104 in file FonctionEtape.asm
      At line 116 in file FonctionEtape.asm
      At line 191 in file FonctionEtape.asm
      At line 226 in file FonctionEtape.asm
      At line 239 in file FonctionEtape.asm
      At line 280 in file FonctionEtape.asm
      At line 315 in file FonctionEtape.asm
      At line 328 in file FonctionEtape.asm

SCB_VTOR E000ED08

Symbol: SCB_VTOR
   Definitions
      At line 43 in file REG_UTILES.inc
   Uses
      None
Comment: SCB_VTOR unused
TIM1_CNT 40012C24

Symbol: TIM1_CNT
   Definitions
      At line 45 in file REG_UTILES.inc
   Uses
      None
Comment: TIM1_CNT unused
TIM1_SR 40012C10

Symbol: TIM1_SR
   Definitions
      At line 44 in file REG_UTILES.inc
   Uses
      None
Comment: TIM1_SR unused
TIM4_ARR 4000082C

Symbol: TIM4_ARR
   Definitions
      At line 46 in file REG_UTILES.inc
   Uses
      None
Comment: TIM4_ARR unused
TIM4_SR 40000810

Symbol: TIM4_SR
   Definitions
      At line 47 in file REG_UTILES.inc
   Uses
      None
Comment: TIM4_SR unused
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Barrette1 00000000

Symbol: Barrette1
   Definitions
      At line 13 in file FonctionEtape.asm
   Uses
      None
Comment: Barrette1 unused
Barrette3 00000000

Symbol: Barrette3
   Definitions
      At line 14 in file FonctionEtape.asm
   Uses
      At line 79 in file FonctionEtape.asm
Comment: Barrette3 used once
DataSend 00000000

Symbol: DataSend
   Definitions
      At line 19 in file FonctionEtape.asm
   Uses
      At line 131 in file FonctionEtape.asm
      At line 254 in file FonctionEtape.asm
      At line 343 in file FonctionEtape.asm

3 symbols
391 symbols in table
